/**
 * Top10OceanCO2Highlighter - highlights the top 10 ocean CO2 hotspots.
 *
 * Reads the "Globals for the Environment" home page file and adjusts the
 * borders of world map images there to highlight ocean CO2 hotspots, based on a
 * "top10AvgRankings.csv" file generated by the GGSMRHotspotFinder program.
 */

homePageFile = '/globals-for-the-environment/public/index.html'

hotspotsFile = '/globals-for-the-environment/public/top10AvgRankings.csv'
NUM_HOTSPOTS = 10

// convert hotspot CSV: latUp, latDown, lonLeft, lonRight, ...
// to region href in home page: "/30deg_N30E0"

regionHrefs = []
new File(hotspotsFile).splitEachLine(',') { hotspot ->
    def i = 0
    def latUp = hotspot[i++] as int
    def latDown = hotspot[i++] as int
    def lonLeft = hotspot[i++] as int
    def lonRight = hotspot[i++] as int

    def latPolarity = latUp > 0 ? 'N' : 'S'
    def lonPolarity = lonLeft < 0 ? 'W' : 'E'
    def absLat = Math.abs(latUp > 0 ? latDown : latUp)
    def absLon = Math.abs(lonLeft < 0 ? lonRight : lonLeft)
    def regionHref = "/30deg_${latPolarity}${absLat}${lonPolarity}${absLon}"
    regionHrefs << regionHref
    println "${hotspot} -> ${regionHref}"
}
assert regionHrefs.size == NUM_HOTSPOTS

// add border to images for hotspot regions in home page

homePage = new File(homePageFile)
hotspotsPage = new File(homePage.parentFile, 'hotspots.html')
imagesChanged = 0

hotspotsPage.withPrintWriter { writer ->
    homePage.eachLine { line ->
    	for (int i = 0; i < NUM_HOTSPOTS; i++) { // hotspots in descending order
    		def regionHref = regionHrefs[i]
    		if (line.contains(regionHref)) {
    			def intensity = Math.max((int)(NUM_HOTSPOTS-i)/2, 3); // min 3px intensity
    			line = line.replace('<img ', "<img style=\"border: ${intensity}px red solid;\"")
    			imagesChanged++
    			break
    		}
    	}

    	if (line.contains('<a href="hotspots.html"'))
            line = '<a href="index.html">Hide CO2 <i>HotSpots</i></a>' +
                   '<br/><font size="-1">' +
                   '<a href="top10AvgRankings.csv" target="_blank">Raw Top 10 Data</i></a>' +
                   '</font>'

        writer.println line
    }
}

assert imagesChanged == NUM_HOTSPOTS

println "${imagesChanged} hotspot images highlighted in ${hotspotsPage.absolutePath}"